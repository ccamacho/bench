---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: bench-prometheus-access
subjects:
- kind: ServiceAccount
  name: default
  namespace: bench
roleRef:
  kind: ClusterRole
  name: prometheus-k8s
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: guidellm-benchmark
  namespace: bench
spec:
  ttlSecondsAfterFinished: 86400
  backoffLimit: 0
  template:
    metadata:
      labels:
        job-name: guidellm-benchmark
    spec:
      serviceAccountName: default
      restartPolicy: Never
      #securityContext:
      #  runAsUser: 1000
      #  fsGroup: 1000
      initContainers:
        - name: timestamp-generator
          image: busybox
          command: ["sh", "-c"]
          args:
            - |
              TS=$(date +"%Y%m%d-%H%M%S");
              echo $TS > /shared/timestamp;
              echo "Generated timestamp: $TS"
          volumeMounts:
            - name: shared-data
              mountPath: /shared
      containers:
        - name: benchmark
          image: ghcr.io/ccamacho/bench:main
          imagePullPolicy: Always
          env:
            - name: GUIDELLM__MAX_WORKER_PROCESSES
              value: "1"
            - name: GUIDELLM__STREAM
              value: "false"
          command: ["/bin/bash", "-c"]
          args:
            - |
              echo "Running benchmark...";
              export HF_TOKEN=$(cat /secrets/token);
              export TRANSFORMERS_OFFLINE=0;
              export HF_HUB_DISABLE_TELEMETRY=1;
              export HF_HOME=/cache;
              export TRANSFORMERS_CACHE=/cache;
              export HOME=/cache;
              TS=$(cat /shared/timestamp);
              OUTPUT_FILE="/output/results-guidellm-${TS}.json";
              
              # Record benchmark start time
              # BENCHMARK_START=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ");
              # Record benchmark start time (4 hours ago for testing)
              BENCHMARK_START=$(date -u -d "4 hours ago" +"%Y-%m-%dT%H:%M:%S.%3NZ");
              echo $BENCHMARK_START > /shared/benchmark_start_time;
              echo "Test benchmark start time (4 hours ago): $BENCHMARK_START";
              
              # Commented out for testing - guidellm benchmark
              # guidellm benchmark \
              #   --output-path $OUTPUT_FILE \
              #   --target http://your-llm-endpoint.com \
              #   --rate-type concurrent \
              #   --rate "128.0" \
              #   --max-seconds 60 \
              #   --data "prompt_tokens=256,output_tokens=128";
              
              echo "Skipping guidellm benchmark for Thanos metrics testing";
              sleep 5; # Brief pause to simulate some work
              
              # Record benchmark end time (now)
              BENCHMARK_END=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ");
              echo $BENCHMARK_END > /shared/benchmark_end_time;
              echo "Test benchmark end time (now): $BENCHMARK_END";
              echo "Benchmark complete. Results stored in $OUTPUT_FILE";
              echo "done" > /shared/benchmark_complete;
              echo "Signaled metrics scraper to start data collection"
          volumeMounts:
            - name: results-volume
              mountPath: /output
            - name: hf-secret
              mountPath: /secrets
              readOnly: true
            - name: hf-cache
              mountPath: /cache
            - name: shared-data
              mountPath: /shared
        - name: thanos-metrics-scraper
          image: curlimages/curl
          command: ["sh", "-c"]
          args:
            - |
              echo "Starting Thanos metrics collection...";
              
              # Wait for benchmark to complete
              echo "Waiting for benchmark to complete...";
              while [ ! -f /shared/benchmark_complete ]; do
                sleep 2;
              done;
              
              # Get files
              TS=$(cat /shared/timestamp);
              TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token);
              OUTPUT_FILE="/output/results-thanos-${TS}.json";
              
              # Use current time as fallback for 4-hour window
              END_UNIX=$(date +%s);
              START_UNIX=$((END_UNIX - 14400));
              
              echo "Using 4-hour window: $START_UNIX to $END_UNIX";
              
              # Test connection
              echo "Testing Thanos connection...";
              curl -s -k -H "Authorization: Bearer $TOKEN" \
                "https://thanos-querier.openshift-monitoring.svc.cluster.local:9091/api/v1/query?query=up" \
                > /dev/null && echo "Connection successful" || echo "Connection failed";
              
              # Create JSON structure
              echo "{\"benchmark_start\":\"4 hours ago\",\"benchmark_end\":\"now\",\"metrics\":{" > $OUTPUT_FILE;
              
              # Define metrics that actually have data
              GPU_METRICS="DCGM_FI_DEV_GPU_UTIL DCGM_FI_DEV_MEM_COPY_UTIL DCGM_FI_DEV_FB_USED DCGM_FI_DEV_FB_FREE DCGM_FI_DEV_POWER_USAGE DCGM_FI_DEV_GPU_TEMP DCGM_FI_DEV_SM_CLOCK DCGM_FI_DEV_MEM_CLOCK";
              VLLM_CONTAINER_METRICS="rate(container_cpu_usage_seconds_total{namespace=\"my-vllm-runtime\"}[5m]) rate(container_memory_working_set_bytes{namespace=\"my-vllm-runtime\"}[5m]) rate(container_network_receive_bytes_total{namespace=\"my-vllm-runtime\"}[5m]) rate(container_network_transmit_bytes_total{namespace=\"my-vllm-runtime\"}[5m])";
              METRICS="$GPU_METRICS $VLLM_CONTAINER_METRICS";
              
              FIRST=true;
              for METRIC in $METRICS; do
                if [ "$FIRST" = "false" ]; then
                  echo "," >> $OUTPUT_FILE;
                fi
                FIRST=false;
                
                echo "Querying metric: $METRIC";
                URL="https://thanos-querier.openshift-monitoring.svc.cluster.local:9091/api/v1/query_range?query=${METRIC}&start=${START_UNIX}&end=${END_UNIX}&step=15";
                RESPONSE=$(curl -s -k -H "Authorization: Bearer $TOKEN" "$URL" 2>/dev/null || echo '{"error":"query_failed"}');
                
                echo "\"$METRIC\":$RESPONSE" >> $OUTPUT_FILE;
              done
              
              echo "}}" >> $OUTPUT_FILE;
              echo "Metrics collection complete. Data saved to $OUTPUT_FILE";
          volumeMounts:
            - name: results-volume
              mountPath: /output
            - name: shared-data
              mountPath: /shared
        - name: sidecar
          image: busybox
          command: ["sh", "-c", "sleep infinity"]
          volumeMounts:
            - name: results-volume
              mountPath: /output
      volumes:
        - name: results-volume
          emptyDir: {}
        - name: hf-secret
          secret:
            secretName: hf-token-secret
        - name: hf-cache
          emptyDir: {}
        - name: shared-data
          emptyDir: {}
